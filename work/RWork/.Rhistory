#R에서 사용하는 주석문
num=100 #num이 100이다.
num
num <- 1000 #num변수에 1000을 저장하라는 의미
num
num==1000 #
num==100
num!=1000
num>1000
num>100
num<100
test <- "myR"
test
test <- myR
myR <- num
test <- myR
test
result <- 100
result <- 100 #숫자형
result1 <- 100 #숫자형
result1
result2 <- "test" #문자형형
result2
#R에서 제공되는 함수를 이용할 수 있으며
class(result1)
class(result2)
test <- as.character(result1)
test
class(test)
test <- as.numeric(result1)
test
class(test)
# =, <- 같은 것처럼 보이지만 <- 를  이용해서 변수에 데이터를 할당
a=100
b <- 100
a
b
s
sqrt(9)
sqrt(x=9)
x
sqrt(x <- 9)
x
? c
myvector <- c(100, 200, 300)
myvector
myvector[1]
myvector[2]
myvector[3]
myvector1 <- c(100, 200, 300)
myvector2 <- c(10,20,30)
myvector1
myvector1 <- c(100, 200, 300)
myvector1
myvector1[1]
myvector1[2]
myvector1[3]
myvector2 <- c(10,20,30)
myvector1
myvector2 <- c(10,20,30
)
myvector
myvector2
myvector2 <- c(10,20,30
myvector1
myvector2
myvector1 + 20
myvector1 * 2
myvector1 + myvector2
mytext <- c("java","R","hadoop","android")
mytext[1]
mytext[1,2]
mytext[c(1,2)]
mytext[c(1,3)]
mytext[1:3]
mytext[c(1:3)]
1:3
1:100
mytext[-1]
mytext[c(-1,-3)]
mytext[c(-1:-3)]
mytext[-c(1:3)]
#TRUE와 FALSE를 이용해서 작업하기
mytext[c(T,T,F,F)]
mytext[mytext=="java"]
numlist <-  1:100
numlist
numlist %%2==0 #%%가 나머지 구하기
numlist[numlist%%2==0]
numlist[numlist%%2==1] #홀수구하기기
numlist2 <- seq(1,10)
numlist2
? seq
numlist2 <- seq(1,10,by = 2)
numlist2
v1 <-  c(70,80,90,100)
names(v1)
names(v1) <-  c("국어","수학","영어","자바")
v1
length(va)
length(v1)
length(v1) # 요소의 갯수를 리턴
mean(v1) #평균리턴
max(v1)#최대값
min(v1)#최소값
# 행렬
matrix(1:15)
? matrix
#? matrix
myMat <- matrix(1:15,ncol=3)
#? matrix
mymat1 <- matrix(1:15,ncol=3)
mymat1
mymat1 <-  matrix(1:15,ncol=3,byrow=T)
mymat1
#matrix에서 원하는 값을 추출하기
mymat1[2,2] #행, 열
mymat1[3,3]
mymat1[1,c(1:3)]
mymat1[1,] #
mymat1[1,] #1행의 모든 열
mymat1[,1]
#1행과 3행 데이터
mymat11[c(1,3),]
#1행과 3행 데이터
mymat1[c(1,3),]
#1행과 3행을 뺀 데이터
mymat1[-c(1,3)]
#1행과 3행을 뺀 데이터
mymat1[-c(1,3),]
#미니실습1 - 2행부터 4행까지 출력(단, 2번 3번 컬럼만)
mymat1[c(2,4),c(2,3)]
#미니실습1 - 2행부터 4행까지 출력(단, 2번 3번 컬럼만)
mymat1[c(2:4),c(2,3)]
cbind(mymat1,c(1,11,111,1111))
addmymat1 <- cbind(mymat1,c(1,11,111,1111))
addmymat1
addmymat2 <- rbind(mymat1,c(1,11))
addmymat2
addmymat2 <- rbind(mymat1,c(1,11,111,1111))
addmymat2
colnames(mymat1) <- c("a","b","c")
mymat1
rownames(mymat1) <- c("r1","r2","r3","r4","r5")
mymat1
mean(mymat1)
mymat2 <- matrix(c(80,90,70,100,80,99,78,72,90,78,82,78,99,89,78,90),ncol=4,byrow = T)
mymat2
colnames(mymat2) <- c("국어", "영어", "과학", "수학")
rownames(mymat2) <- c("kim","lee","hong","jang")
mymat2
m1 <- matrix(c(80,90,70,100,80,99,78,72,90,78,82,78,99,89,78,90),ncol=4,byrow = T)
m1
colnames(m1) <- c("국어", "영어", "과학", "수학")
rownames(m1) <- c("kim","lee","hong","jang")
m1
avg_name <- mean(m1[1,])
avg_name
? mean
avg_name <- c(mean(m1[1,]),mean(m1[2,]),mean(m1[3,]),mean(m1[4,]))
avg_name
avg_subject <- c(mean(m1[,1]),mean(m1[,2]),mean(m1[,3]),mean(m1[,4]))
avg_subject
m1 <- matrix(c(80,90,70,100,80,99,78,72,90,78,82,78,99,89,78,90),ncol=4,byrow = T)
m1
colnames(m1) <- c("국어", "영어", "과학", "수학")
rownames(m1) <- c("kim","lee","hong","jang")
m1 #? mean
avg_name <- c(mean(m1[1,]),mean(m1[2,]),mean(m1[3,]),mean(m1[4,]))
avg_name
avg_subject <- c(mean(m1[,1]),mean(m1[,2]),mean(m1[,3]),mean(m1[,4]))
avg_subject
dataframeMat1 <-  matrix(1:15,ncol=3,byrow=T)
dataframeMat1
dataframeMat1 <-  matrix(1:15,ncol=3,byrow=T)
dataframeMat1
dataframeMat2 <- data.frame(dataframeMat1)
dataframeMat2
mydataframe <- data.frame(dataframeMat1)
mydataframe
dataframeMat1[,1]
mydataframe[,1]
#matrix로 정의된 데이터를 dataframe으로 변경하여 작업하는 경우가 많음
#matrix의 1열만 char타입으로 변경
as.character(dataframeMat1[,1])
#matrix로 정의된 데이터를 dataframe으로 변경하여 작업하는 경우가 많음
#matrix의 1열만 char타입으로 변경
dataframeMat1[,1] <- as.character(dataframeMat1[,1])
dataframeMat1
#str함수는 dataframe내부의 데이터형을 볼 수 있는 함수
str(mydataframe)
mydataframe[,1] <- as.character(mydataframe[,1])
str(mydataframe)
mydataframe
mydataframe$X1 #$를 이용해서 열의 이름을 접근할 수 있다.
mydataframe$X2
mydataframe$X3
#dataframe에 열을 추가
col4 <- c(1,1,1,1,1)
mydataframe$x4 <- col4
mydataframe
#필요한 곳에서 dataframe을 다시 matrix로 변환
dataframeMat2 <- as.matrix(mydataframe)
dataframeMat2
#dataframe만들기 - 1. matrix를 dataframe으로 변환
#2. 벡터를 여러 개 만들어서 dataframe을 작성
eng <- c(100,99,90)
math <- c(100,99,100)
mydf1 <- data.frame(eng,math)
mydf1
mean(mydf1$math)
mean(mydf1$eng)
mean(mydf1$math)
#3. dataframe을 직접 정의
mydf2 <- data.frame(eng=c(100,100,100),
m = c(90,90,90))
mydf2
m <- matrix([1:15],ncol=3,byros=T)
m
m <- matrix(1:15,ncol=3,byros=T)
m
m <- matrix(1:15,ncol=3,byrow=T)
m
d <- data.frame(m)
d
t(m)
#생성이 완료되어 사용중인 matrix, dataframe의 행과 열을 변경하고 싶은 변경
m <- matrix(1:15,ncol=3,byrow=T)
m
t(m)
m
#생성이 완료되어 사용중인 matrix, dataframe의 행과 열을 변경하고 싶은 변경
m <- matrix(1:15,ncol=3,byrow=T)
m
m <- t(m)
m
d <- data.frame(m)
d
fruit <- data.frame(제품=c("사과","딸기","수박",가격=c(1800,1500,3000),판매량=c(24,38,13))
fruit
fruit <- data.frame("제품"=c("사과","딸기","수박"),"가격"=c(1800,1500,3000),"판매량"=c(24,38,13))
fruit
mean(fruit[,2])
mean(fruit[,3])
mean(fruit$"가격")
mean(fruit$"판매량량")
mean(fruit$"판매량")
num <- 88
num <- 88
if(num>=90){
print("합격")
}else{
print("다시")
}
if(num>=90){
print("수")
}else if(num>=80){
print("우")
}else {
print("다시")
}
myv <- c(1:10)
i
myv <- c(1:10)
for (i in myv) {
i
}
for (i in myv) {
print(i)
}
num <- 0
for (i in num) {
num <-  num + i
}
print(num)
num <- 0
for (i in num) {
num += i
}
print(num)
num <- 0
for (i in num) {
num <- i
}
print(num)
num <- 0
for (i in num) {
num <- sum(i)
}
print(num)
num <- 0
for (i in num) {
num <- num + sum(i)
}
print(num)
num <- 0
for (i in num) {
i
}
print(num)
sum <- 0
for (i in myv) {
sum += i
}
print(sum)
sum <- 0
for (i in myv) {
sum = sum + i
}
print(sum)
#1부터 10까지 합구하기 - ver2
myv2 <- c(1:100)
sum(myv2)
#csv는 기본 패키지로 사용가능
#csv를 읽기
mdf = read.csv("csv_exam.csv")
mdf
#csv는 기본 패키지로 사용가능
#csv를 읽기
mdf  <-  read.csv("csv_exam.csv")
mdf
mdf[2,]
#dataframe에서 조건에 만족하는 데이터를 조회
m <-matrix(1:20,ncol = 4)
m
d <- data.frame(m)
d
myresult <- d[d$X3>=13,]
myresult
#조건에 만족하는 데이터를 result.csv로 저장
write.csv(myresult,file = "result.csv")
result <- mdf[,mdf$science>=80]
result <- mdf[mdf$science>=80,]
result
result$mytotal <- c(sum(result[1,]),sum(result[2,]),sum(result[3,]),sum(result[4,]))
result
result$myavg <- c(mean(result[1,]),mean(result[2,]),mean(result[3,]),mean(result[4,]))
result$mytotal <- c(sum(result[1,3:6]),sum(result[2,3:6]),sum(result[3,3:6]),sum(result[4,3:6]))
result
result <- mdf[mdf$science>=80,]
result$mytotal <- c(sum(result[1,3:6]),sum(result[2,3:6]),sum(result[3,3:6]),sum(result[4,3:6]))
result
result$myavg <- c(mean(result[1,3:6]),mean(result[2,3:6]),mean(result[3,3:6]),mean(result[4,3:6]))
csvresult <- mdf[mdf$science>=80,]
csvresult$mytotal <- c(sum(result[1,3:6]),sum(result[2,3:6]),sum(result[3,3:6]),sum(result[4,3:6]))
csvresult <- mdf[mdf$science>=80,]
csvresult$mytotal <- c(sum(csvresult[1,3:5]),sum(csvresult[2,3:5]),sum(csvresult[3,3:5]),sum(result[4,3:5]))
csvresult
csvresult$myavg <- c(mean(csvresult[1,3:5]),mean(csvresult[2,3:5]),mean(csvresult[3,3:5]),mean(csvresult[4,3:5]))
?mean
csvresult <- mdf[mdf$science>=80,]
csvresult$mytotal <- c(sum(csvresult[1,3:5]),sum(csvresult[2,3:5]),sum(csvresult[3,3:5]),sum(csvresult[4,3:5]))
csvresult
csvresult$myavg <- c(mean(csvresult[1,3:5]),mean(csvresult[2,3:5]),mean(csvresult[3,3:5]),mean(csvresult[4,3:5]))
csvresult$myavg <- c(mean(csvresult[,3:5]),mean(csvresult[,3:5]),mean(csvresult[,3:5]),mean(csvresult[,3:5]))
csvresult$myavg <- c(csvresult$mytotal/3,csvresult$mytotal/3,csvresult$mytotal/3,csvresult$mytotal/3)
csvresult
str(csvresult)
mean(csvresult$mytotal)
csvresult$myavg <- c(mean(csvresult[1,3:5]),mean(csvresult[2,3:5]),mean(csvresult[3,3:5]),mean(csvresult[4,3:5]))
avg <- c(mean(csvresult[1,3:5]),mean(csvresult[2,3:5]),mean(csvresult[3,3:5]),mean(csvresult[4,3:5]))
avg <- c(csvresult$mytotal)
avg
avg <- c(csvresult$mytotal/3)
avg
avg <- c(mean(csvresult$mytotal))
avg
avg <- c(mean(csvresult$mytotal[1,]))
avg <- c(mean(csvresult[1,5]))
avg
avg <- c(mean(csvresult[1,6]))
avg <- c(mean(csvresult[1,3:5]))
avg <- c(mean(csvresult$mytotal/3))
avg
avg <- c(mean(csvresult$mytotal/3))
avg
avg <- c(mean(csvresult$mytotal))
avg
avg <- c(csvresult$mytotal/3)
avg
csvresult$myavg <- avg
csvresult
write.csv(csvresult,file = "csv_exam_result.csv")
