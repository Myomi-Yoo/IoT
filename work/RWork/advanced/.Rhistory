nrow(mpg)
View(mpg)
View(mpg)
View(mpg)
remove.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library("ggplot2")
qplot(data = mpg,x = hwy)
qplot(data = mpg,x = hwy,y = drv)
qplot(data = mpg,x = drv,y = hwy,geom = "line")
qplot(data = mpg,x = drv,y = hwy,geom = "boxplot")
qplot(data = mpg,x = drv,y = hwy,geom = "line")
qplot(data = mpg,x = drv,y = hwy,geom = "boxplot")
mpg <- as.data.frame(mpg)
qplot(data = mpg,x = drv,y = hwy,geom = "boxplot",colour=drv)
nrow(mpg)
####외부데이터 읽어오기####
####csv파일읽기####
#readLines을 이용하면 데이터가 커도 어떤 구성인지 확인하기 편하다
dfimport <-  readLines("01_csv.csv",n = 3)
dfimport
?data.frame
#csv파일이므로 ,로 구분이 되어 있지만 사용자가 원하는 구분자를 적용해서 작성한 문자열인 경우
#01_csv.csv읽은 내용을 가공해서 데이터프레임을 작성
dfcsv <- data.frame(num=1:3,
mydata = dfimport,
stringsAsFactors = FALSE)
dfcsv
dfcsv$mydata #컬럼안의 문자열이 ,가 추가
str(dfcsv)
#,로 분리는 되지만 list도 결과가 리턴되어 불편==============
strsplit(dfcsv$mydata,split = ",")[[1]]
strsplit(dfcsv$mydata,split = ",")[[2]]
#하나의 컬럼안에 구분자로 텍스트가 구성된 경우 분리
install.packages("splitstackshape")
library("splitstackshape")
dfcsv2 <- cSplit(indt = dfcsv,
splitCols = "mydata",
sep = ",")
dfcsv2
class(dfcsv2)
dfcsv
dfcsv2
class(dfcsv2)
#타입 변경
# as의 함수들을 이용해서 변경
# as는 ~~~가 아닌 것을 ~~~로 변경한다는의미 - data.table과 data.frame의 속성을 가지고 있는 dfcsv2를 dataframe으로 변경
dfcsv2 <- as.data.frame(dfcsv2)
#타입 변경
# as의 함수들을 이용해서 변경
# as는 ~~~가 아닌 것을 ~~~로 변경한다는의미 - data.table과 data.frame의 속성을 가지고 있는 dfcsv2를 dataframe으로 변경
dfcsv2 <- as.data.frame(dfcsv2)
class(dfcsv2) #타입을 확인
class(dfcsv2$num)
class(dfcsv2$mydata_1)
dfcsv2
class(dfcsv2) #타입을 확인
str(dfcsv2)
class(dfcsv2$mydata_1)
class(dfcsv2$mydata_2)
class(dfcsv2$mydata_3)
class(dfcsv2$mydata_4)
class(dfcsv2$mydata_5)
class("dd")
str(dfcsv2) #전체 데이터의 구조를 확인
#변환한 데이터들의 타입이 Factor
#Factor는 순서와 명목형
#1,2,3,.....의 값이 어떤 순서를 의미하는 경우 : 컬럼의 데이터가 순서형
#class컬럼 1,2,3,4...:순서를 의미하지 않고 1반, 2반, 3반....
#순서가 적용되도록 정의된 Factor타입을 char로 변경
#1번 컬럼을 뺀 나머지 컬럼의 타입을 char로 변환
for(i in 2:ncol(dfcsv2) ){
dfcsv2[,i] = as.character(dfcsv2[,i])
}
str(dfcsv2)
####tsv 파일 읽기####
#tab으로 구분된 파일(\t)
df3 <- read.delim("02_tsv.txt" ,sep = "\t")  #java의 Stringtokenizer 기능
head(df3)       # 기본 6줄이 읽힌다.
####xml 파일 읽기####
install.packages("XML")
library("XML")
?xmlTreeParse
dfxml <- xmlTreeParse("03_xml.xml")
dfxml
# root element와 하위엘리먼트만 추출
dfxml <- xmlRoot(dfxml)
dfxml
library("XML")
dfxml <- xmlTreeParse("03_xml.xml")
dfxml
#xml에 있는 모든 태그의 name과 value를 추출
#xxxApply함수는 for문 대신 사용할 수 있는 함수
dfxml <- xmlSApply(dfxml,function(x){
xmlSApply(x,xmlValue)
})
dfxml
dfxml <- data.frame(t(dfxml),row.names = NULL)
dfxml
####xlsx 파일 읽기####
install.packages("readxl")
library("readxl")
dfxlsx <- read_xlsx("07_xlsx.xlsx")
dfxlsx # tibble => data.frame과 비슷한 다른 종류의 라이브러리
a <- sample(1:10)
a
a <- sample(1:10,size = 5)
a
a <- sample(1:10,size = 5)
a
a <- sample(1:10,size = 5)
a
a <- sample(1:10,size = 5)
a <- sample(1:10,size = 5,replace = FALSE)
a
a <- sample(1:10,size = 3,replace = FALSE)
a
a <- sample(1:10,size = 3,replace = FALSE)
a
a <- sample(1:10,size = 3,replace = FALSE)
a
a <- sample(1:10,size = 5,replace = FALSE)
a
a <- sample(1:10,size = 5,replace = FALSE)
a
a <- sample(1:10,size = 5,replace = FALSE)
a
a <- sample(1:10,size = 5,replace = FALSE)
a
a <- sample(1:10,size = 5,replace = TRUE)
a
a <- sample(1:10,size = 5,replace = TRUE)
a
a <- sample(1:10,size = 5,replace = TRUE)
a
a <- sample(1:10,size = 5,replace = TRUE)
a
a <- sample(1:10,size = 5,replace = FALSE)
a
set.seed(1222)
a <- sample(1:10,size = 5,replace = FALSE)
a
a <- sample(1:10,size = 5,replace = FALSE)
a
set.seed(1222)#1222는 key
a <- sample(1:10,size = 5,replace = FALSE)
a
set.seed(1222)#1222는 key
a <- sample(1:10,size = 5,replace = FALSE)
a
set.seed(1222)#1222는 key
a <- sample(1:10,size = 5,replace = FALSE)
a
a <- sample(1:10,size = 5,replace = FALSE)
a
set.seed(1222)#1222는 key
a <- sample(1:10,size = 5,replace = FALSE)
a
a
a
a
a <- sample(1:10,size = 5,replace = FALSE)
a
a
a
a
set.seed(1222)#1222는 key
a <- sample(1:10,size = 5,replace = FALSE)
a
set.seed(1222)#1222는 key
a <- sample(1:10,size = 5,replace = FALSE)
a
set.seed(1222)#1222는 key
a <- sample(1:10,size = 5,replace = FALSE)
a
set.seed(1222)#1222는 key
a <- sample(1:10,size = 5,replace = FALSE)
a
set.seed(1222)#1222는 key
a <- sample(1:10,size = 5,replace = FALSE)
a
?xmlTreeParse
?xmlTreeParse
set.seed(1222)#1222는 key
a <- sample(1:10,size = 5,replace = FALSE)
a
set.seed(1222)#1222는 key
a <- sample(1:10,size = 5,replace = FALSE)
a
set.seed(121)#1222는 key
a <- sample(1:10,size = 5,replace = FALSE)
a
set.seed(1222)#1222는 key
a <- sample(1:10,size = 5,replace = FALSE)
a
#if문의 역할을 하는 함수 - ifesle
set.seed(1222)
ifdf <- data.frame(mynum=1:6,
myval=sample(c("spring","bigdata","android"),
size = 6,
replace = TRUE))
ifdf
#if문의 역할을 하는 함수 - ifesle
set.seed(1221)
ifdf <- data.frame(mynum=1:6,
myval=sample(c("spring","bigdata","android"),
size = 6,
replace = TRUE))
ifdf
#if문의 역할을 하는 함수 - ifesle
set.seed(1221)
ifdf <- data.frame(mynum=1:6,
myval=sample(c("spring","bigdata"),
size = 6,
replace = TRUE))
ifdf
#myval의 값이 spring이면 프로젝트완료, bigdata이면 할꺼야
for(i in 1:nrow(ifdf)){
if(ifdf[i,"myval"]=="spring"){
ifdf[i,"info"] <- "프로젝트완료"
}else{
ifdf[i,"info"] <- "할꺼야"
}
}
ifdf
#함수를 이용해서 - info2
ifdf[,"info2"] <- ifelse(test = ifdf$myval=="spring",
yes = "쉽다",
no = "할꺼다")
ifdf
set.seed(1221)
ifdf <- data.frame(mynum=1:6,
myval=sample(c("spring","bigdata"),
size = 6,
replace = TRUE))
ifdf
#myval의 값이 spring이면 프로젝트완료, bigdata이면 할꺼야
for(i in 1:nrow(ifdf)){
if(ifdf[i,"myval"]=="spring"){
ifdf[i,"info"] <- "프로젝트완료"
}else{
ifdf[i,"info"] <- "할꺼야"
}
}
ifdf
#함수를 이용해서 - info2
ifdf[,"info2"] <- ifelse(test = ifdf$myval=="spring",
yes = "쉽다",
no = "할꺼다")
ifdf
set.seed(1221)
ifdf <- data.frame(mynum=1:6,
myval=sample(c("spring","bigdata","android"),
size = 6,
replace = TRUE))
ifdf
#myval의 값이 spring이면 프로젝트완료, bigdata이면 할꺼야
for(i in 1:nrow(ifdf)){
if(ifdf[i,"myval"]=="spring"){
ifdf[i,"info"] <- "프로젝트완료"
}else{
ifdf[i,"info"] <- "할꺼야"
}
}
ifdf
#함수를 이용해서 - info2
ifdf[,"info2"] <- ifelse(test = ifdf$myval=="spring",
yes = "쉽다",
no = "할꺼다")
ifdf
#조건이 2개 이상인 경우 처리
ifdf[,"info3"] <- ifelse(test = ifdf$myval=="spring",
yes = "쉽다",
no = ifelse(test = ifdf$myval=="bigdata",
yes = "머신셋팅",
no = "device셋팅완료"))
ifdf
ifdf[,"info4"] <- "쉽다"
ifdf
#### step2. mpg의 정보를 출력 ####
# 행 갯수, 열의 갯수, 위에서 10개, 끝에서 10개 출력
nrow(mpg)
ncol(mpg)
head(mpg, 10)
tail(mpg, 10)
dim(mpg)
#### step3. mpg의 컬럼명을 변경 ####
# cty => city, hwy => highway
library("dplyr")
mpg <- rename(mpg, city=cty)
mpg <- rename(mpg, highway=hwy)
mpg
#### step4. 파생변수 생성하기 ####
# total컬럼을 추가 => cty와 hwy의 합
# avg컬럼을 추가 => cty와 hwy의 평균
mpg$total <- mpg$city+mpg$highway
mpg$avg <- mpg$total/2
mpg
#### step5. 생성된 total을 가지고 요약정보 확인 ####
summary(mpg$total)
#### step6. info컬럼 추가 ####
# total값을 이용해서 평가 - 30이상이면 pass, fail
mpg[,"info"] <- ifelse(test = mpg$total>=30,
yes = "pass",
no = "fail")
mpg
#### step7. grade컬럼 추가 ####
# total값을 이용해서 평가 - 40이상이면 A, 35이상이면 B, 30이상이면 C, 나머지 D
mpg[,"info"] <- ifelse(test = mpg$total>=40,
yes = "A",
no = ifelse(test = mpg$total>=35,
yes = "B",
no = ifelse(test = mpg$total>=30,
yes = "C",
no = "D")))
#### step6. info컬럼 추가 ####
# total값을 이용해서 평가 - 30이상이면 pass, fail
mpg[,"info"] <- ifelse(test = mpg$total>=30,
yes = "pass",
no = "fail")
mpg
#### step7. grade컬럼 추가 ####
# total값을 이용해서 평가 - 40이상이면 A, 35이상이면 B, 30이상이면 C, 나머지 D
mpg[,"info2"] <- ifelse(test = mpg$total>=40,
yes = "A",
no = ifelse(test = mpg$total>=35,
yes = "B",
no = ifelse(test = mpg$total>=30,
yes = "C",
no = "D")))
mpg
#rename(data, 변경할 컬럼명=기존컬럼명)
exam <- rename(exam, eng=english)
exam
exam <- read.csv("csv_exam.csv")
#rename(data, 변경할 컬럼명=기존컬럼명)
exam <- rename(exam, eng=english)
exam
table(exam$eng)
qplot(exam$eng)
class(num1)
#수치형 변수
#정수 - integer(int), R에서 다루는 모든 숫자 - numeric
num1 = 10
class(num1)
num2 = 10L
class(num2)
result <- num1
result <- num1+num2
result
class(result)
data(package="MASS") #R내부의 샘플데잍터셋을 가져오기
library(MASS)
data("Boston")
head(Boston)
colnames(Boston)
t(colnames(Boston))
t(t(colnames(Boston)))
df <- head(Boston)
df <- head(Boston[,1:7])
df
#반복작업을 할 때 사용할 수 있도록 함수를 지원
#margin = 1 => 행방향, 2 "열열방향
df[,"total"] <- apply(X = df,MARGIN = 1,FUN = "sum")
df
df[,"avg"] <- apply(X = df,MARGIN = 1,FUN = "mean")
df
apply(x = df, MARGIN = 2, FUN = "sum")
round(apply(x = df, MARGIN = 2, FUN = "sum"))
round(apply(x = df, MARGIN = 2, FUN = "mean"))
round(apply(X = df, MARGIN = 2, FUN = "sum"),4)
round(apply(X = df, MARGIN = 2, FUN = "mean"),4)
? apply
sapply(X = df, FUN = "class")
t(t(sapply(X = df, FUN = "class")))
#주어진 데이터에서 원하는 데이터만 추출
library("dplyr")
data("airquality")
head("airquality")
head(airquality)
df2 <- airquality
df2
#필터링 - 벡터연산
df2[,1]
#필터링 - 벡터연산
df2[,1:4]
#필터링 - 벡터연산
head(df2[,1:4])
df2_data1 <- df2[1:5,]
df2_data1
df2[df2$Day==1]
df2[,df2$Day==1]
df2[df2$Day==1,]
df2$Day==1
df2[df2$Day!=1,]
df2[df2$Day<=2,]
df2[df2$Day<=2 | df2$Day==2,]
df2$Day %in% 1:2
sum(df2$Day %in% 1:2)
df2_data2 = df2[df2$Day %in% 1:2,]
norw(df2_data2)
nrow(df2_data2)
#dplyr패키지에서 지원하는 필터관련 함수
filter(df2,Day==1 & Month==5)
filter(df2,Day %in% c(1,3,5))
library("dplyr")
exam <- read.csv("csv_exam.csv")
exam
exam %>% filter(class==1)
exam %>%
filter(class==1) %>%
filter(math>=50)
#select
exam %>% select(-math)
#arrange
exam %>% arrange(id)
exam %>% arrange(desc(id))
exam %>% select(id,math,eng)
exam %>% select(id,math,english)
exam %>%
filter(class==1) %>%
#arrange
exam %>% arrange(id)
exam %>%
filter(class==1) %>%
exam %>%
filter(class==1)
exam %>%
filter(class==1) %>%
select(id,math,science)
exam %>% arrange(class())
exam %>% arrange(class
exam %>% select(id,math,english)
exam %>% arrange(class)
exam %>% arrange(class,eng)
exam %>% arrange(class,english)
exam %>% arrange(class,desc(english))
#mutate - 파생변수 추가하기 (원본에 없는 컬럼 추가)
exam %>% mutate(total=math+english+science) %>% head()
exam %>%
mutate(total=math+english+science,
mean = total/3) %>%
head()
exam %>%
mutate(total=math+english+science,
mean = total/3,
info = ifelse(science>=70,"통과","재시험"))
exam %>%
group_by(class)
exam %>%
group_by(class) %>%
summarise(math_sum = sum(math),
math_mean = mean(math),
math_median = median(math),
math_count = n())
test1 <- data.frame(id=c(1,2,3,4,5),
mid_jumsu=c(77,56,99,100,99))
test2 <- data.frame(id=c(1,2,3,4,5),
final_jumsu=c(77,56,99,100,99))
test1
test2
final_data <- left_join(teat1, test2, by="id")
final_data <- left_join(test1, test2, by = "id")
final_data
namedata <- data.frame(class=c(1,2,3,4,5),
teacher=c("kim","lee","park","kang","hong"))
str(namedata)
namedata <- data.frame(class=c(1,2,3,4,5),
teacher=c("kim","lee","park","kang","hong")
stringsAsFactors = F)
namedata <- data.frame(class=c(1,2,3,4,5),
teacher=c("kim","lee","park","kang","hong"),
stringsAsFactors = F)
str(namedata)
exam_new <- left_join(exam,namedata,by="class")
exam_new
groupA <- data.frame(id=c(1,2,3,4,5),
mid_jumsu=c(77,56,99,100,99))
groupB <- data.frame(id=c(6,7,8,9,10),
mid_jumsu=c(77,56,99,100,99))
group_total <- bind_rows(groupA,groupB)
group_total
mpg
nrow(mpg)
mpg %>%
group_by(class) %>%
summarise(avg_cty = mean(cty))
mpg %>%
group_by(class) %>%
summarise(avg_city = mean(city))
mpg %>%
group_by(class)
mpg %>%
group_by(class) %>%
summarise(avg_city = mean(city)) %>%
arrange(desc(avg_city))
mpg %>%
group_by(manufacturer) %>%
summarise(avg_hwy = mean(highway)) %>%
arrange(desc(avg_hwy)) %>%
head(3)
mpg %>%
filter(class=="compact")
mpg %>%
filter(class=="compact") %>%
group_by(class) %>%
summarise(num = n())
mpg %>%
filter(class=="compact") %>%
group_by(manufacturer) %>%
summarise(num = n())
